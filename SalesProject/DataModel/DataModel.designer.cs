#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SalesProject.DataModel
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DBTest")]
	public partial class DataModelDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertMeasureType(MeasureType instance);
    partial void UpdateMeasureType(MeasureType instance);
    partial void DeleteMeasureType(MeasureType instance);
    partial void InsertProductType(ProductType instance);
    partial void UpdateProductType(ProductType instance);
    partial void DeleteProductType(ProductType instance);
    partial void InsertOperationState(OperationState instance);
    partial void UpdateOperationState(OperationState instance);
    partial void DeleteOperationState(OperationState instance);
    partial void InsertOperationType(OperationType instance);
    partial void UpdateOperationType(OperationType instance);
    partial void DeleteOperationType(OperationType instance);
    partial void InsertProduct(Product instance);
    partial void UpdateProduct(Product instance);
    partial void DeleteProduct(Product instance);
    partial void InsertProductCategory(ProductCategory instance);
    partial void UpdateProductCategory(ProductCategory instance);
    partial void DeleteProductCategory(ProductCategory instance);
    partial void InsertProductPrice(ProductPrice instance);
    partial void UpdateProductPrice(ProductPrice instance);
    partial void DeleteProductPrice(ProductPrice instance);
    partial void InsertOperationContent(OperationContent instance);
    partial void UpdateOperationContent(OperationContent instance);
    partial void DeleteOperationContent(OperationContent instance);
    partial void InsertOperation(Operation instance);
    partial void UpdateOperation(Operation instance);
    partial void DeleteOperation(Operation instance);
    #endregion
		
		public DataModelDataContext() : 
				base(global::SalesProject.Properties.Settings.Default.DBTestConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataModelDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataModelDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataModelDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataModelDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<MeasureType> MeasureTypes
		{
			get
			{
				return this.GetTable<MeasureType>();
			}
		}
		
		public System.Data.Linq.Table<ProductType> ProductTypes
		{
			get
			{
				return this.GetTable<ProductType>();
			}
		}
		
		public System.Data.Linq.Table<OperationState> OperationStates
		{
			get
			{
				return this.GetTable<OperationState>();
			}
		}
		
		public System.Data.Linq.Table<OperationType> OperationTypes
		{
			get
			{
				return this.GetTable<OperationType>();
			}
		}
		
		public System.Data.Linq.Table<Product> Products
		{
			get
			{
				return this.GetTable<Product>();
			}
		}
		
		public System.Data.Linq.Table<ProductCategory> ProductCategories
		{
			get
			{
				return this.GetTable<ProductCategory>();
			}
		}
		
		public System.Data.Linq.Table<ProductPrice> ProductPrices
		{
			get
			{
				return this.GetTable<ProductPrice>();
			}
		}
		
		public System.Data.Linq.Table<OperationContent> OperationContents
		{
			get
			{
				return this.GetTable<OperationContent>();
			}
		}
		
		public System.Data.Linq.Table<Operation> Operations
		{
			get
			{
				return this.GetTable<Operation>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MeasureType")]
	public partial class MeasureType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _MeasureTypeName;
		
		private string _MeasureTypeSmallName;
		
		private EntitySet<Product> _Products;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnMeasureTypeNameChanging(string value);
    partial void OnMeasureTypeNameChanged();
    partial void OnMeasureTypeSmallNameChanging(string value);
    partial void OnMeasureTypeSmallNameChanged();
    #endregion
		
		public MeasureType()
		{
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeasureTypeName", DbType="VarChar(50)")]
		public string MeasureTypeName
		{
			get
			{
				return this._MeasureTypeName;
			}
			set
			{
				if ((this._MeasureTypeName != value))
				{
					this.OnMeasureTypeNameChanging(value);
					this.SendPropertyChanging();
					this._MeasureTypeName = value;
					this.SendPropertyChanged("MeasureTypeName");
					this.OnMeasureTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeasureTypeSmallName", DbType="VarChar(50)")]
		public string MeasureTypeSmallName
		{
			get
			{
				return this._MeasureTypeSmallName;
			}
			set
			{
				if ((this._MeasureTypeSmallName != value))
				{
					this.OnMeasureTypeSmallNameChanging(value);
					this.SendPropertyChanging();
					this._MeasureTypeSmallName = value;
					this.SendPropertyChanged("MeasureTypeSmallName");
					this.OnMeasureTypeSmallNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MeasureType_Product", Storage="_Products", ThisKey="id", OtherKey="idMeasureType")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.MeasureType = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.MeasureType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductType")]
	public partial class ProductType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _ProductTypeName;
		
		private System.Nullable<int> _idProductCategory;
		
		private EntitySet<Product> _Products;
		
		private EntityRef<ProductCategory> _ProductCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnProductTypeNameChanging(string value);
    partial void OnProductTypeNameChanged();
    partial void OnidProductCategoryChanging(System.Nullable<int> value);
    partial void OnidProductCategoryChanged();
    #endregion
		
		public ProductType()
		{
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			this._ProductCategory = default(EntityRef<ProductCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductTypeName", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string ProductTypeName
		{
			get
			{
				return this._ProductTypeName;
			}
			set
			{
				if ((this._ProductTypeName != value))
				{
					this.OnProductTypeNameChanging(value);
					this.SendPropertyChanging();
					this._ProductTypeName = value;
					this.SendPropertyChanged("ProductTypeName");
					this.OnProductTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idProductCategory", DbType="Int")]
		public System.Nullable<int> idProductCategory
		{
			get
			{
				return this._idProductCategory;
			}
			set
			{
				if ((this._idProductCategory != value))
				{
					if (this._ProductCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidProductCategoryChanging(value);
					this.SendPropertyChanging();
					this._idProductCategory = value;
					this.SendPropertyChanged("idProductCategory");
					this.OnidProductCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductType_Product", Storage="_Products", ThisKey="id", OtherKey="idProductType")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductCategory_ProductType", Storage="_ProductCategory", ThisKey="idProductCategory", OtherKey="id", IsForeignKey=true)]
		public ProductCategory ProductCategory
		{
			get
			{
				return this._ProductCategory.Entity;
			}
			set
			{
				ProductCategory previousValue = this._ProductCategory.Entity;
				if (((previousValue != value) 
							|| (this._ProductCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductCategory.Entity = null;
						previousValue.ProductTypes.Remove(this);
					}
					this._ProductCategory.Entity = value;
					if ((value != null))
					{
						value.ProductTypes.Add(this);
						this._idProductCategory = value.id;
					}
					else
					{
						this._idProductCategory = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProductCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.ProductType = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.ProductType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OperationState")]
	public partial class OperationState : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _OperationStateName;
		
		private EntitySet<Operation> _Operations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnOperationStateNameChanging(string value);
    partial void OnOperationStateNameChanged();
    #endregion
		
		public OperationState()
		{
			this._Operations = new EntitySet<Operation>(new Action<Operation>(this.attach_Operations), new Action<Operation>(this.detach_Operations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OperationStateName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string OperationStateName
		{
			get
			{
				return this._OperationStateName;
			}
			set
			{
				if ((this._OperationStateName != value))
				{
					this.OnOperationStateNameChanging(value);
					this.SendPropertyChanging();
					this._OperationStateName = value;
					this.SendPropertyChanged("OperationStateName");
					this.OnOperationStateNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OperationState_Operation", Storage="_Operations", ThisKey="id", OtherKey="idOperationState")]
		public EntitySet<Operation> Operations
		{
			get
			{
				return this._Operations;
			}
			set
			{
				this._Operations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Operations(Operation entity)
		{
			this.SendPropertyChanging();
			entity.OperationState = this;
		}
		
		private void detach_Operations(Operation entity)
		{
			this.SendPropertyChanging();
			entity.OperationState = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OperationType")]
	public partial class OperationType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _OperationTypeName;
		
		private EntitySet<Operation> _Operations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnOperationTypeNameChanging(string value);
    partial void OnOperationTypeNameChanged();
    #endregion
		
		public OperationType()
		{
			this._Operations = new EntitySet<Operation>(new Action<Operation>(this.attach_Operations), new Action<Operation>(this.detach_Operations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OperationTypeName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string OperationTypeName
		{
			get
			{
				return this._OperationTypeName;
			}
			set
			{
				if ((this._OperationTypeName != value))
				{
					this.OnOperationTypeNameChanging(value);
					this.SendPropertyChanging();
					this._OperationTypeName = value;
					this.SendPropertyChanged("OperationTypeName");
					this.OnOperationTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OperationType_Operation", Storage="_Operations", ThisKey="id", OtherKey="idOperationType")]
		public EntitySet<Operation> Operations
		{
			get
			{
				return this._Operations;
			}
			set
			{
				this._Operations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Operations(Operation entity)
		{
			this.SendPropertyChanging();
			entity.OperationType = this;
		}
		
		private void detach_Operations(Operation entity)
		{
			this.SendPropertyChanging();
			entity.OperationType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Product")]
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _ProductName;
		
		private int _idProductType;
		
		private int _idMeasureType;
		
		private System.Nullable<decimal> _Size;
		
		private System.Nullable<decimal> _Balance;
		
		private EntitySet<ProductPrice> _ProductPrices;
		
		private EntityRef<MeasureType> _MeasureType;
		
		private EntityRef<ProductType> _ProductType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnProductNameChanging(string value);
    partial void OnProductNameChanged();
    partial void OnidProductTypeChanging(int value);
    partial void OnidProductTypeChanged();
    partial void OnidMeasureTypeChanging(int value);
    partial void OnidMeasureTypeChanged();
    partial void OnSizeChanging(System.Nullable<decimal> value);
    partial void OnSizeChanged();
    partial void OnBalanceChanging(System.Nullable<decimal> value);
    partial void OnBalanceChanged();
    #endregion
		
		public Product()
		{
			this._ProductPrices = new EntitySet<ProductPrice>(new Action<ProductPrice>(this.attach_ProductPrices), new Action<ProductPrice>(this.detach_ProductPrices));
			this._MeasureType = default(EntityRef<MeasureType>);
			this._ProductType = default(EntityRef<ProductType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductName", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string ProductName
		{
			get
			{
				return this._ProductName;
			}
			set
			{
				if ((this._ProductName != value))
				{
					this.OnProductNameChanging(value);
					this.SendPropertyChanging();
					this._ProductName = value;
					this.SendPropertyChanged("ProductName");
					this.OnProductNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idProductType", DbType="Int NOT NULL")]
		public int idProductType
		{
			get
			{
				return this._idProductType;
			}
			set
			{
				if ((this._idProductType != value))
				{
					if (this._ProductType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidProductTypeChanging(value);
					this.SendPropertyChanging();
					this._idProductType = value;
					this.SendPropertyChanged("idProductType");
					this.OnidProductTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idMeasureType", DbType="Int NOT NULL")]
		public int idMeasureType
		{
			get
			{
				return this._idMeasureType;
			}
			set
			{
				if ((this._idMeasureType != value))
				{
					if (this._MeasureType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidMeasureTypeChanging(value);
					this.SendPropertyChanging();
					this._idMeasureType = value;
					this.SendPropertyChanged("idMeasureType");
					this.OnidMeasureTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Size", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Size
		{
			get
			{
				return this._Size;
			}
			set
			{
				if ((this._Size != value))
				{
					this.OnSizeChanging(value);
					this.SendPropertyChanging();
					this._Size = value;
					this.SendPropertyChanged("Size");
					this.OnSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Balance", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Balance
		{
			get
			{
				return this._Balance;
			}
			set
			{
				if ((this._Balance != value))
				{
					this.OnBalanceChanging(value);
					this.SendPropertyChanging();
					this._Balance = value;
					this.SendPropertyChanged("Balance");
					this.OnBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProductPrice", Storage="_ProductPrices", ThisKey="id", OtherKey="idProduct")]
		public EntitySet<ProductPrice> ProductPrices
		{
			get
			{
				return this._ProductPrices;
			}
			set
			{
				this._ProductPrices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MeasureType_Product", Storage="_MeasureType", ThisKey="idMeasureType", OtherKey="id", IsForeignKey=true)]
		public MeasureType MeasureType
		{
			get
			{
				return this._MeasureType.Entity;
			}
			set
			{
				MeasureType previousValue = this._MeasureType.Entity;
				if (((previousValue != value) 
							|| (this._MeasureType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MeasureType.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._MeasureType.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._idMeasureType = value.id;
					}
					else
					{
						this._idMeasureType = default(int);
					}
					this.SendPropertyChanged("MeasureType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductType_Product", Storage="_ProductType", ThisKey="idProductType", OtherKey="id", IsForeignKey=true)]
		public ProductType ProductType
		{
			get
			{
				return this._ProductType.Entity;
			}
			set
			{
				ProductType previousValue = this._ProductType.Entity;
				if (((previousValue != value) 
							|| (this._ProductType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductType.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._ProductType.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._idProductType = value.id;
					}
					else
					{
						this._idProductType = default(int);
					}
					this.SendPropertyChanged("ProductType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProductPrices(ProductPrice entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ProductPrices(ProductPrice entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductCategory")]
	public partial class ProductCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _ProductCategoryName;
		
		private EntitySet<ProductType> _ProductTypes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnProductCategoryNameChanging(string value);
    partial void OnProductCategoryNameChanged();
    #endregion
		
		public ProductCategory()
		{
			this._ProductTypes = new EntitySet<ProductType>(new Action<ProductType>(this.attach_ProductTypes), new Action<ProductType>(this.detach_ProductTypes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductCategoryName", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string ProductCategoryName
		{
			get
			{
				return this._ProductCategoryName;
			}
			set
			{
				if ((this._ProductCategoryName != value))
				{
					this.OnProductCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._ProductCategoryName = value;
					this.SendPropertyChanged("ProductCategoryName");
					this.OnProductCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductCategory_ProductType", Storage="_ProductTypes", ThisKey="id", OtherKey="idProductCategory")]
		public EntitySet<ProductType> ProductTypes
		{
			get
			{
				return this._ProductTypes;
			}
			set
			{
				this._ProductTypes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProductTypes(ProductType entity)
		{
			this.SendPropertyChanging();
			entity.ProductCategory = this;
		}
		
		private void detach_ProductTypes(ProductType entity)
		{
			this.SendPropertyChanging();
			entity.ProductCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductPrice")]
	public partial class ProductPrice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _idProduct;
		
		private decimal _Price;
		
		private System.DateTime _DateBegin;
		
		private System.Nullable<System.DateTime> _DateEnd;
		
		private EntitySet<OperationContent> _OperationContents;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnidProductChanging(int value);
    partial void OnidProductChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    partial void OnDateBeginChanging(System.DateTime value);
    partial void OnDateBeginChanged();
    partial void OnDateEndChanging(System.Nullable<System.DateTime> value);
    partial void OnDateEndChanged();
    #endregion
		
		public ProductPrice()
		{
			this._OperationContents = new EntitySet<OperationContent>(new Action<OperationContent>(this.attach_OperationContents), new Action<OperationContent>(this.detach_OperationContents));
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idProduct", DbType="Int NOT NULL")]
		public int idProduct
		{
			get
			{
				return this._idProduct;
			}
			set
			{
				if ((this._idProduct != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidProductChanging(value);
					this.SendPropertyChanging();
					this._idProduct = value;
					this.SendPropertyChanged("idProduct");
					this.OnidProductChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Decimal(18,2) NOT NULL")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateBegin", DbType="Date NOT NULL")]
		public System.DateTime DateBegin
		{
			get
			{
				return this._DateBegin;
			}
			set
			{
				if ((this._DateBegin != value))
				{
					this.OnDateBeginChanging(value);
					this.SendPropertyChanging();
					this._DateBegin = value;
					this.SendPropertyChanged("DateBegin");
					this.OnDateBeginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateEnd", DbType="Date")]
		public System.Nullable<System.DateTime> DateEnd
		{
			get
			{
				return this._DateEnd;
			}
			set
			{
				if ((this._DateEnd != value))
				{
					this.OnDateEndChanging(value);
					this.SendPropertyChanging();
					this._DateEnd = value;
					this.SendPropertyChanged("DateEnd");
					this.OnDateEndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductPrice_OperationContent", Storage="_OperationContents", ThisKey="id", OtherKey="idProductPrice")]
		public EntitySet<OperationContent> OperationContents
		{
			get
			{
				return this._OperationContents;
			}
			set
			{
				this._OperationContents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProductPrice", Storage="_Product", ThisKey="idProduct", OtherKey="id", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ProductPrices.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ProductPrices.Add(this);
						this._idProduct = value.id;
					}
					else
					{
						this._idProduct = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OperationContents(OperationContent entity)
		{
			this.SendPropertyChanging();
			entity.ProductPrice = this;
		}
		
		private void detach_OperationContents(OperationContent entity)
		{
			this.SendPropertyChanging();
			entity.ProductPrice = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OperationContent")]
	public partial class OperationContent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _idProductPrice;
		
		private int _idOperation;
		
		private decimal _Count;
		
		private EntityRef<ProductPrice> _ProductPrice;
		
		private EntityRef<Operation> _Operation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnidProductPriceChanging(int value);
    partial void OnidProductPriceChanged();
    partial void OnidOperationChanging(int value);
    partial void OnidOperationChanged();
    partial void OnCountChanging(decimal value);
    partial void OnCountChanged();
    #endregion
		
		public OperationContent()
		{
			this._ProductPrice = default(EntityRef<ProductPrice>);
			this._Operation = default(EntityRef<Operation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idProductPrice", DbType="Int NOT NULL")]
		public int idProductPrice
		{
			get
			{
				return this._idProductPrice;
			}
			set
			{
				if ((this._idProductPrice != value))
				{
					if (this._ProductPrice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidProductPriceChanging(value);
					this.SendPropertyChanging();
					this._idProductPrice = value;
					this.SendPropertyChanged("idProductPrice");
					this.OnidProductPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idOperation", DbType="Int NOT NULL")]
		public int idOperation
		{
			get
			{
				return this._idOperation;
			}
			set
			{
				if ((this._idOperation != value))
				{
					if (this._Operation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidOperationChanging(value);
					this.SendPropertyChanging();
					this._idOperation = value;
					this.SendPropertyChanged("idOperation");
					this.OnidOperationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Count", DbType="Decimal(18,2) NOT NULL")]
		public decimal Count
		{
			get
			{
				return this._Count;
			}
			set
			{
				if ((this._Count != value))
				{
					this.OnCountChanging(value);
					this.SendPropertyChanging();
					this._Count = value;
					this.SendPropertyChanged("Count");
					this.OnCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductPrice_OperationContent", Storage="_ProductPrice", ThisKey="idProductPrice", OtherKey="id", IsForeignKey=true)]
		public ProductPrice ProductPrice
		{
			get
			{
				return this._ProductPrice.Entity;
			}
			set
			{
				ProductPrice previousValue = this._ProductPrice.Entity;
				if (((previousValue != value) 
							|| (this._ProductPrice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductPrice.Entity = null;
						previousValue.OperationContents.Remove(this);
					}
					this._ProductPrice.Entity = value;
					if ((value != null))
					{
						value.OperationContents.Add(this);
						this._idProductPrice = value.id;
					}
					else
					{
						this._idProductPrice = default(int);
					}
					this.SendPropertyChanged("ProductPrice");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Operation_OperationContent", Storage="_Operation", ThisKey="idOperation", OtherKey="id", IsForeignKey=true)]
		public Operation Operation
		{
			get
			{
				return this._Operation.Entity;
			}
			set
			{
				Operation previousValue = this._Operation.Entity;
				if (((previousValue != value) 
							|| (this._Operation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Operation.Entity = null;
						previousValue.OperationContents.Remove(this);
					}
					this._Operation.Entity = value;
					if ((value != null))
					{
						value.OperationContents.Add(this);
						this._idOperation = value.id;
					}
					else
					{
						this._idOperation = default(int);
					}
					this.SendPropertyChanged("Operation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Operation")]
	public partial class Operation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.DateTime _OperationDateTime;
		
		private System.Nullable<decimal> _Payment;
		
		private System.Nullable<decimal> _Delivery;
		
		private int _idOperationState;
		
		private int _idOperationType;
		
		private EntitySet<OperationContent> _OperationContents;
		
		private EntityRef<OperationState> _OperationState;
		
		private EntityRef<OperationType> _OperationType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnOperationDateTimeChanging(System.DateTime value);
    partial void OnOperationDateTimeChanged();
    partial void OnPaymentChanging(System.Nullable<decimal> value);
    partial void OnPaymentChanged();
    partial void OnDeliveryChanging(System.Nullable<decimal> value);
    partial void OnDeliveryChanged();
    partial void OnidOperationStateChanging(int value);
    partial void OnidOperationStateChanged();
    partial void OnidOperationTypeChanging(int value);
    partial void OnidOperationTypeChanged();
    #endregion
		
		public Operation()
		{
			this._OperationContents = new EntitySet<OperationContent>(new Action<OperationContent>(this.attach_OperationContents), new Action<OperationContent>(this.detach_OperationContents));
			this._OperationState = default(EntityRef<OperationState>);
			this._OperationType = default(EntityRef<OperationType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OperationDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime OperationDateTime
		{
			get
			{
				return this._OperationDateTime;
			}
			set
			{
				if ((this._OperationDateTime != value))
				{
					this.OnOperationDateTimeChanging(value);
					this.SendPropertyChanging();
					this._OperationDateTime = value;
					this.SendPropertyChanged("OperationDateTime");
					this.OnOperationDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Payment", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Payment
		{
			get
			{
				return this._Payment;
			}
			set
			{
				if ((this._Payment != value))
				{
					this.OnPaymentChanging(value);
					this.SendPropertyChanging();
					this._Payment = value;
					this.SendPropertyChanged("Payment");
					this.OnPaymentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Delivery", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Delivery
		{
			get
			{
				return this._Delivery;
			}
			set
			{
				if ((this._Delivery != value))
				{
					this.OnDeliveryChanging(value);
					this.SendPropertyChanging();
					this._Delivery = value;
					this.SendPropertyChanged("Delivery");
					this.OnDeliveryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idOperationState", DbType="Int NOT NULL")]
		public int idOperationState
		{
			get
			{
				return this._idOperationState;
			}
			set
			{
				if ((this._idOperationState != value))
				{
					if (this._OperationState.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidOperationStateChanging(value);
					this.SendPropertyChanging();
					this._idOperationState = value;
					this.SendPropertyChanged("idOperationState");
					this.OnidOperationStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idOperationType", DbType="Int NOT NULL")]
		public int idOperationType
		{
			get
			{
				return this._idOperationType;
			}
			set
			{
				if ((this._idOperationType != value))
				{
					if (this._OperationType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidOperationTypeChanging(value);
					this.SendPropertyChanging();
					this._idOperationType = value;
					this.SendPropertyChanged("idOperationType");
					this.OnidOperationTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Operation_OperationContent", Storage="_OperationContents", ThisKey="id", OtherKey="idOperation")]
		public EntitySet<OperationContent> OperationContents
		{
			get
			{
				return this._OperationContents;
			}
			set
			{
				this._OperationContents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OperationState_Operation", Storage="_OperationState", ThisKey="idOperationState", OtherKey="id", IsForeignKey=true)]
		public OperationState OperationState
		{
			get
			{
				return this._OperationState.Entity;
			}
			set
			{
				OperationState previousValue = this._OperationState.Entity;
				if (((previousValue != value) 
							|| (this._OperationState.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OperationState.Entity = null;
						previousValue.Operations.Remove(this);
					}
					this._OperationState.Entity = value;
					if ((value != null))
					{
						value.Operations.Add(this);
						this._idOperationState = value.id;
					}
					else
					{
						this._idOperationState = default(int);
					}
					this.SendPropertyChanged("OperationState");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OperationType_Operation", Storage="_OperationType", ThisKey="idOperationType", OtherKey="id", IsForeignKey=true)]
		public OperationType OperationType
		{
			get
			{
				return this._OperationType.Entity;
			}
			set
			{
				OperationType previousValue = this._OperationType.Entity;
				if (((previousValue != value) 
							|| (this._OperationType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OperationType.Entity = null;
						previousValue.Operations.Remove(this);
					}
					this._OperationType.Entity = value;
					if ((value != null))
					{
						value.Operations.Add(this);
						this._idOperationType = value.id;
					}
					else
					{
						this._idOperationType = default(int);
					}
					this.SendPropertyChanged("OperationType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OperationContents(OperationContent entity)
		{
			this.SendPropertyChanging();
			entity.Operation = this;
		}
		
		private void detach_OperationContents(OperationContent entity)
		{
			this.SendPropertyChanging();
			entity.Operation = null;
		}
	}
}
#pragma warning restore 1591
